# app.py
import os
import threading
from flask import Flask, request, jsonify, send_from_directory
from dotenv import load_dotenv
from sqlalchemy.orm import Session
from models import init_db, SessionLocal, User, Gift, InventoryItem, Match, Bet, Currency, MatchStatus
from logic import (
    get_or_create_user, add_stars, inventory_delta, parse_gifts_blob,
    create_match, place_bet_stars, place_bet_gifts, resolve_match, can_start_match
)
from config import get_config

# Telegram bot
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters

load_dotenv()
cfg = get_config()

app = Flask(__name__, static_folder="webapp", static_url_path="")

# --------- API –¥–ª—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---------

def get_session() -> Session:
    return SessionLocal()

def resolve_tg_user_from_webapp(initData) -> int:
    """
    –£–ø—Ä–æ—â—ë–Ω–Ω–æ: –∏–∑ initDataUnsafe –±–µ—Ä—ë–º user.id, –∑–¥–µ—Å—å –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–º –ø–æ–¥–ø–∏—Å—å/–ø—Ä–æ–≤–µ—Ä–∫—É.
    –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä—å —Ö—ç—à –ø–æ–¥–ø–∏—Å–∏ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç—É Telegram WebApp.
    """
    # –¥–ª—è MVP –ø—Ä–∏–Ω–∏–º–∞–µ–º tg_id –∏–∑ –∑–∞–≥–ª—É—à–∫–∏ (–Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ, –Ω–æ –±—ã—Å—Ç—Ä–æ)
    # –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ –º—ã –Ω–µ —à–ª—ë–º –≤–µ—Å—å initDataUnsafe ‚Äî –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ —Ä–µ–∞–ª–∏–∑—É–π –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∏!
    return int(os.getenv("ADMIN_USER_ID", "0"))  # fallback: —Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç

@app.post("/api/me")
def api_me():
    s = get_session()
    try:
        tg_user_id = resolve_tg_user_from_webapp(request.json.get("initData"))
        me = get_or_create_user(s, tg_user_id)
        # —Å–æ–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏
        inv = s.query(InventoryItem).filter_by(user_id=me.id).all()
        gifts = []
        for i in inv:
            gifts.append({"code": i.gift.code, "title": i.gift.title, "qty": i.qty, "value": i.gift.value_stars})
        return jsonify({"ok": True, "me": {"stars": me.stars_balance, "gifts": gifts}})
    finally:
        s.close()

@app.post("/api/start_fight")
def api_start_fight():
    payload = request.json.get("payload") or {}
    currency = payload.get("currency")
    bet = payload.get("bet") or {}
    s = get_session()
    try:
        tg_user_id = resolve_tg_user_from_webapp(request.json.get("initData"))
        user = get_or_create_user(s, tg_user_id)

        if not can_start_match(s, user):
            return jsonify({"ok": False, "error": "–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."})

        if currency not in ("stars", "gifts"):
            return jsonify({"ok": False, "error": "–ù–µ–≤–µ—Ä–Ω–∞—è –≤–∞–ª—é—Ç–∞."})
        cur = Currency.STARS if currency == "stars" else Currency.GIFTS

        m = create_match(s, cur)
        ok, msg = (False, "–û—à–∏–±–∫–∞")
        if cur == Currency.STARS:
            amount = int(bet.get("amount", 0))
            ok, msg = place_bet_stars(s, m, user, amount)
        else:
            gifts_blob = bet.get("gifts", "")
            gifts = parse_gifts_blob(gifts_blob)
            ok, msg = place_bet_gifts(s, m, user, gifts)

        if not ok:
            return jsonify({"ok": False, "error": msg})

        # –í —ç—Ç–æ–π –ø—Ä–æ—Å—Ç–æ–π –≤–µ—Ä—Å–∏–∏ —Å—Ä–∞–∑—É –∞–≤—Ç–æ–ø–æ–¥–±–æ—Ä —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ (–±–æ—Ç-—Å–æ–ø–µ—Ä–Ω–∏–∫) –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–∞—Ç—á–∞:
        # —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–µ–ª –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.
        bot_user = get_or_create_user(s, tg_user_id + 1, username="BotOpponent")
        if m.currency == Currency.STARS:
            # –±–æ—Ç —Å—Ç–∞–≤–∏—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫—É—é –∂–µ —Å—É–º–º—É
            from random import randint
            bot_amount = max(1, int(m.bets[0].value_stars * (0.8 + randint(0, 40)/100)))
            add_stars(s, bot_user, bot_amount)  # —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ —Ö–≤–∞—Ç–∏–ª–æ
            place_bet_stars(s, m, bot_user, bot_amount)
        else:
            # –±–æ—Ç –ø–æ—Å—Ç–∞–≤–∏—Ç –¥–µ—à–µ–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫
            inventory_delta(s, bot_user, "ROSE", 2)  # –≤—ã–¥–∞—Ç—å –±–æ—Ç—É —Ä–æ–∑—ã
            place_bet_gifts(s, m, bot_user, {"ROSE": 2})

        winner_id, pool, commission, detail = resolve_match(s, m)
        message = f"–ú–∞—Ç—á #{m.id} —Ä–∞–∑—ã–≥—Ä–∞–Ω. –ü—É–ª: {pool}‚≠êÔ∏è, –∫–æ–º–∏—Å—Å–∏—è: {commission}‚≠êÔ∏è."
        if detail.get("type") == "gift":
            message += f" –ö–æ–º–∏—Å—Å–∏—è –≤–∑—è—Ç–∞ –ø–æ–¥–∞—Ä–∫–æ–º {detail['gift_code']} (‚≠êÔ∏è{detail['gift_value']})."
        message += (" –ü–æ–±–µ–¥–∞ –∑–∞ –≤–∞–º–∏! üéâ" if winner_id == user.id else " –£–≤—ã, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.")
        return jsonify({"ok": True, "message": message})
    except Exception as e:
        return jsonify({"ok": False, "error": str(e)})
    finally:
        s.close()

# –æ—Ç–¥–∞—ë–º —Å—Ç–∞—Ç–∏–∫—É –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@app.get("/")
def index():
    return send_from_directory("webapp", "index.html")

# --------- Telegram Bot ---------

BOT_TOKEN = os.getenv("BOT_TOKEN", "")

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    s = get_session()
    try:
        u = get_or_create_user(s, update.effective_user.id, update.effective_user.username)
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ PvP-–±–æ—Ç.\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/balance ‚Äî –±–∞–ª–∞–Ω—Å\n"
            "/fight ‚Äî –±—ã—Å—Ç—Ä—ã–π –±–æ–π —Å –±–æ—Ç–æ–º\n"
            "/addstars 50 ‚Äî –≤—ã–¥–∞—Ç—å —Å–µ–±–µ –∑–≤–µ–∑–¥—ã (–¥–ª—è —Ç–µ—Å—Ç–∞)\n"
            "/gifts ‚Äî –º–æ–∏ –ø–æ–¥–∞—Ä–∫–∏\n"
            "/mini ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
        )
    finally:
        s.close()

async def cmd_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    s = get_session()
    try:
        u = get_or_create_user(s, update.effective_user.id, update.effective_user.username)
        inv = s.query(InventoryItem).filter_by(user_id=u.id).all()
        gifts_str = ", ".join([f"{i.gift.title} x{i.qty}" for i in inv]) or "–Ω–µ—Ç"
        await update.message.reply_text(f"‚≠êÔ∏è –ó–≤—ë–∑–¥—ã: {u.stars_balance}\nüéÅ –ü–æ–¥–∞—Ä–∫–∏: {gifts_str}")
    finally:
        s.close()

async def cmd_addstars(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª-–≤–æ: /addstars 50")
        return
    amount = int(context.args[0])
    s = get_session()
    try:
        u = get_or_create_user(s, update.effective_user.id, update.effective_user.username)
        add_stars(s, u, amount)
        await update.message.reply_text(f"–ù–∞—á–∏—Å–ª–µ–Ω–æ {amount}‚≠êÔ∏è. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {u.stars_balance}")
    finally:
        s.close()

async def cmd_gifts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    s = get_session()
    try:
        u = get_or_create_user(s, update.effective_user.id, update.effective_user.username)
        inv = s.query(InventoryItem).filter_by(user_id=u.id).all()
        if not inv:
            await update.message.reply_text("–ü–æ–¥–∞—Ä–∫–æ–≤ –Ω–µ—Ç. –î–ª—è —Ç–µ—Å—Ç–∞ –≤—ã–¥–∞–º ROSE x3.")
            inventory_delta(s, u, "ROSE", +3)
            return
        gifts_str = "\n".join([f"{i.gift.title} ({i.gift.code}) x{i.qty} (‚≠êÔ∏è{i.gift.value_stars})" for i in inv])
        await update.message.reply_text("–í–∞—à–∏ –ø–æ–¥–∞—Ä–∫–∏:\n" + gifts_str)
    finally:
        s.close()

async def cmd_fight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ë—ã—Å—Ç—Ä—ã–π –±–æ–π —Å –±–æ—Ç–æ–º: –∏–≥—Ä–æ–∫ —Å—Ç–∞–≤–∏—Ç 10‚≠êÔ∏è, –±–æ—Ç ‚Äî —Å–ª—É—á–∞–π–Ω–æ 8-12‚≠êÔ∏è, –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ.
    """
    s = get_session()
    try:
        user = get_or_create_user(s, update.effective_user.id, update.effective_user.username)
        if not can_start_match(s, user):
            await update.message.reply_text("–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
            return

        from random import randint
        # —Å–æ–∑–¥–∞—ë–º –º–∞—Ç—á –Ω–∞ –∑–≤—ë–∑–¥—ã
        m = create_match(s, Currency.STARS)
        ok, msg = place_bet_stars(s, m, user, 10)
        if not ok:
            await update.message.reply_text("–û—à–∏–±–∫–∞: " + msg)
            return

        bot_user = get_or_create_user(s, user.tg_id + 1, username="BotOpponent")
        bot_amount = randint(8, 12)
        add_stars(s, bot_user, bot_amount)
        place_bet_stars(s, m, bot_user, bot_amount)

        winner_id, pool, commission, detail = resolve_match(s, m)
        text = f"–ú–∞—Ç—á #{m.id}: –≤—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ 10‚≠êÔ∏è, —Å–æ–ø–µ—Ä–Ω–∏–∫ ‚Äî {bot_amount}‚≠êÔ∏è.\n–ü—É–ª: {pool}‚≠êÔ∏è, –∫–æ–º–∏—Å—Å–∏—è: {commission}‚≠êÔ∏è."
        if detail.get("type") == "gift":
            text += f" –ö–æ–º–∏—Å—Å–∏—è –ø–æ–¥–∞—Ä–∫–æ–º {detail['gift_code']} (‚≠êÔ∏è{detail['gift_value']})."
        text += "\n–ò—Ç–æ–≥: " + ("üéâ –ü–æ–±–µ–¥–∞!" if winner_id == user.id else "–ü–æ—Ä–∞–∂–µ–Ω–∏–µ üòî")
        await update.message.reply_text(text)
    finally:
        s.close()

async def cmd_mini(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = os.getenv("WEBAPP_URL", "http://localhost:5000")
    await update.message.reply_text(f"–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {url}")

def run_bot():
    app_ = Application.builder().token(os.getenv("BOT_TOKEN")).build()
    app_.add_handler(CommandHandler("start", cmd_start))
    app_.add_handler(CommandHandler("balance", cmd_balance))
    app_.add_handler(CommandHandler("addstars", cmd_addstars))
    app_.add_handler(CommandHandler("gifts", cmd_gifts))
    app_.add_handler(CommandHandler("fight", cmd_fight))
    app_.add_handler(CommandHandler("mini", cmd_mini))
    app_.run_polling(close_loop=False)

if __name__ == "__main__":
    init_db()
    # –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, Flask ‚Äî –≤ –≥–ª–∞–≤–Ω–æ–º
    t = threading.Thread(target=run_bot, daemon=True)
    t.start()
    app.run(host="0.0.0.0", port=5000, debug=True)
